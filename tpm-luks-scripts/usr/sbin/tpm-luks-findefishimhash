#!/bin/bash

GRUBLOADER="grubx64.efi"

# This script searches for SHIM loader (if UEFI is in use)
# If yes, it then checks if SHIM supports TPM extensions
# If no TPM extensions are supported within SHIM, a warning message is printed
# Otherwise a sha1 hash of "grubx64.efi" (harcoded in shim.efi) is computed and printed

echoerr() { echo "$@" 1>&2; }

MODE=$([ -d /sys/firmware/efi ] && echo -n UEFI || echo -n BIOS)
if [ "x$MODE" == "xBIOS" ]; then
    echoerr "This script is for UEFI boot only."
    exit 9
fi

BOOTCURRENT=`efibootmgr -v | grep 'BootCurrent' | awk '{print $2}'`
if [ -z "$BOOTCURRENT" ]; then
    echoerr "Unable to determine current boot entry number"
    exit 1
fi

EFIENTRY=`efibootmgr -v | grep Boot${BOOTCURRENT} | egrep -o '[a-zA-Z0-9.,()/\-]*' | grep .efi`
if [ -z "$EFIENTRY" ]; then
    echoerr "Unable to determine current boot entry data"
    exit 2
fi
echoerr "EFIENTRY=$EFIENTRY"

UUID=`echo $EFIENTRY | awk -F, '{print $3}'`
if [ -z "$UUID" ]; then
    echoerr "Unable to determine current boot entry UUID"
    exit 3
fi

EFIFILE=`echo $EFIENTRY | awk -F'/File' '{print $2}' | egrep -o '[a-zA-Z0-9.,/\-]*' | head -n 1 | sed 's/\\\\/\\//g'`
if [ -z "$EFIFILE" ]; then
    echoerr "Unable to determine current boot entry filename"
    exit 3
fi
echoerr "UUID=$UUID, EFIFILE=$EFIFILE"

# searches all disks. uses sfdisk to dump uuids on each disk. greps for the $UUID. if there are multiple matches
# (should not occur), select the first and only
DRIVES=`lsblk | grep disk | awk '{print $1}'`
EFIDISK=`for disk in ${DRIVES}; do sfdisk -d $disk | grep -i uuid=$UUID | awk '{print $1}'; done | head -n 1`
if [ -z "$EFIDISK" ]; then
    echoerr "Unable to determine current boot entry UUID disk (is the partition still present?)"
    exit 4
fi
echoerr "EFIDISK=$EFIDISK"

MOUNTPOINT=`mount | grep -w $EFIDISK | awk '{print $3}'`
if [ -z "$MOUNTPOINT" ]; then
    echoerr "Unable to determine current boot entry UUID disk (is the disk present?)"
    exit 5
fi
echoerr "MOUNTPOINT=$MOUNTPOINT"

LOADERFILE="${MOUNTPOINT}$EFIFILE"
if [ -z "$LOADERFILE" ]; then
    echoerr "Unable to determine current boot entry filename."
    exit 5
fi
if [ ! -f "$LOADERFILE" ]; then
    echoerr "Boot entry file not found. Is the boot file for EFI boot still present?"
    exit 5
fi

HAVESHIM=0
SHIMPATH=""
[[ "$LOADERFILE" == *shimx64.efi ]]        && HAVESHIM=1
[[ "$LOADERFILE" == *shimx64.efi.signed ]] && HAVESHIM=1
[[ "$LOADERFILE" == *shim.efi ]]           && HAVESHIM=1
[[ "$LOADERFILE" == *shim.efi.signed ]]    && HAVESHIM=1

if [ $HAVESHIM -eq 0 ]; then
    # Shim is not in use, just terminate and do not print any output
    exit 0
fi

# Shim is in use - now check it for TPM support
TPM=1
# https://github.com/rhinstaller/shim/blob/6c180c6004ac464d7e83c1dc4c24047fad281b32/shim.c
# Shim attempts to log the "Second stage bootloader" string into TCG log
# This string is not present in the shims without TPM support
strings $LOADERFILE | grep -qi "Second stage bootloader" || TPM=0

if [ $TPM -eq 0 ]; then
    echoerr "Your shim does NOT support TPM extensions. Your system is partially unprotected!"
    exit 99
fi

[[ "$LOADERFILE" == *shimx64.efi ]]        && SHIMPATH=${LOADERFILE%shimx64.efi}
[[ "$LOADERFILE" == *shimx64.efi.signed ]] && SHIMPATH=${LOADERFILE%shimx64.efi.signed}
[[ "$LOADERFILE" == *shim.efi ]]           && SHIMPATH=${LOADERFILE%shim.efi}
[[ "$LOADERFILE" == *shim.efi.signed ]]    && SHIMPATH=${LOADERFILE%shim.efi.signed}

GRUBPATH="$SHIMPATH$GRUBLOADER"
echoerr "Hashing $GRUBPATH"

if [ -z "$GRUBPATH" ]; then
    echoerr "Unable to determine SHIM directory/GRUB path."
    exit 5
fi
if [ ! -f "$GRUBPATH" ]; then
    echoerr "$GRUBLOADER file not found in $SHIMPATH. Did you by any chance remove it accidentaly?"
    exit 5
fi
sha1sum $GRUBPATH | awk '{print $1}'